---
// See:
// https://dev.to/hr21don/enable-dark-mode-for-your-astro-website-via-css-variables-ohe
// https://css-tricks.com/a-complete-guide-to-dark-mode-on-the-web/#aa-using-custom-properties

import Ri from './RadioItem.astro';

interface Props {
  tabindex?: number;
}

const { tabindex } = Astro.props;
const themes = [
  {
    icon: "‚óë",
    value: "default",
    description: "OS Default",
  },
  {
    icon: "‚òÄÔ∏è",
    value: "light",
    description: "Light",
  },
  {
    icon: "üåô",
    value: "dark",
    description: "Dark",
  },
];

---
<theme-control data-themes={JSON.stringify(themes)} aria-haspopup="true" tabindex={tabindex ?? 0} transition:persist>
  <div class="current-theme-display" title="Change theme">
    {themes[0].icon}
  </div>
  <menu tabindex=1>
  {
    themes.map((theme, idx) => (
      <Ri tabindex={idx + 1} {...theme}></Ri>
    ))
  }
  </menu>
</theme-control>
<script>

type Theme = 'default' | 'light' | 'dark';
const defaultTheme: Theme = 'default';

interface ThemeObject {
  value: Theme;
  icon: string;
  description: string;
}

class ThemeControl extends HTMLElement {
  get currentThemeDisplay(): HTMLElement | null {
    return this.querySelector('.current-theme-display');
  }

  get themeMenu(): HTMLMenuElement | null {
    return this.querySelector('menu');
  }

  get themes(): ThemeObject[] {
    return this.dataset.themes !== undefined ? JSON.parse(this.dataset.themes) : [];
  }

  get currentTheme(): Theme {
    const localTheme = localStorage.getItem('theme') ?? defaultTheme;
    return this.sanitizeTheme(localTheme as Theme);
  }

  set currentTheme(theme: string) {
    const sanitizedTheme = this.sanitizeTheme(theme);

    // Set the body data-theme attribute to match the local storage item
    this.documentTheme = sanitizedTheme;
    localStorage.setItem('theme', sanitizedTheme);
    this.renderCurrentTheme();
  }

  set documentTheme(theme: Theme) {
    document.documentElement.setAttribute('data-theme', theme);
  }

  sanitizeTheme(other: string): Theme {
    return this.themes.find((theme: ThemeObject) => theme.value == other) ?
      other as Theme :
      defaultTheme;
  }

  get currentThemeObject(): ThemeObject {
    return this.themes.find((theme: ThemeObject) => theme.value === this.currentTheme) ?? this.themes[0];
  }

  renderCurrentTheme() {
    this.documentTheme = this.currentTheme;
    if (this.currentThemeDisplay !== null) {
      this.currentThemeDisplay.innerHTML = this.currentThemeObject.icon;
    }
  }

  constructor() {
    super();
    this.renderCurrentTheme();

    if (this.themeMenu !== null) {
      this.themeMenu.addEventListener('click', this.switchTheme.bind(this), false);
    }
  }

  closeMenu() {
    this.blur();
  }

  switchTheme(e: Event) {
    let target = e.target as HTMLElement;
    if (!target.matches('button')) {
      target = target.closest('button') as HTMLButtonElement;
    }
    this.currentTheme = target.dataset.value ?? defaultTheme;
    this.closeMenu();
  }

}
customElements.define("theme-control", ThemeControl);
</script>
<style lang="scss">
:root {
  --theme-control-dimension: 2.1rem;
}

theme-control {
  line-height: var(--theme-control-dimension);
  height: var(--theme-control-dimension);
  box-sizing: border-box;
  margin-left: 1rem;
  user-select: none;
  position: relative;
  &:focus-within,
  &:focus {
    .current-theme-display {
      border-bottom-right-radius: 0;
      border-bottom-left-radius: 0;
      border-bottom: none;
      z-index: 2;
      background: var(--background-color);
    }
    menu {
      visibility: visible;
    }
  }
}

.current-theme-display {
  box-sizing: border-box;
  cursor: pointer;
  position: relative;

  &:hover {
    border: 1px solid rgb(var(--accent));
  }

  border: 1px solid #999;
  border-radius: 5px;
  text-align: center;
  font-size: calc(var(--theme-control-dimension) / 2);
  width: var(--theme-control-dimension);
  line-height: var(--theme-control-dimension);
}

menu {
  visibility: hidden;
  position: absolute;
  background: var(--background-color);
  width: 10rem;
  right: 0;
  margin-top: -1px; // for border
  padding: 0;
  z-index: 1;
  border: 1px solid #999;
  border-radius: 5px 0 5px 5px;
}

@media only screen
  and (max-width: 615px) {

  .current-theme-display {
    // position: static;
    // background: yellow;
  }

}

@media only screen
  and (min-width: 615px)
  and (max-width: 960px) {

  theme-control {
    position: fixed;
    top: 2rem;
    right: 1rem;
  }

}

</style>
